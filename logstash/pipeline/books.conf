input {
  file {
    path => "/usr/share/logstash/data/combined_data_part_*.json"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
  }
}

filter {
  if [user][location] {
    mutate {
      split => { "[user][location]" => "," }
    }

    ruby {
      code => '
        loc = event.get("[user][location]")
        if loc.is_a?(Array)
          event.set("[user][city]", loc[0]&.strip)
          event.set("[user][state]", loc[1]&.strip)
          event.set("[user][country]", loc[2]&.strip)
        end
      '
    }

    mutate {
      remove_field => ["[user][location]"]
    }
  }

  mutate {
    convert => {
      "[user][age]" => "integer"
      "[book][year_of_publication]" => "integer"
      "book_rating" => "integer"
    }
  }

  ruby {
    code => '
      source = event.get("_source") || {}
      book = event.get("book")
      user = event.get("user")
      rating = event.get("book_rating")

      new_book = {
        "title" => book["title"],
        "image_urls" => {
          "medium" => book["image_urls"]["medium"],
          "large" => book["image_urls"]["large"],
          "small" => book["image_urls"]["small"]
        },
        "publisher" => book["publisher"],
        "year_of_publication" => book["year_of_publication"],
        "author" => book["author"],
        "isbn" => book["isbn"]
      }

      new_user = {
        "city" => user["city"],
        "age" => user["age"],
        "country" => user["country"],
        "state" => user["state"],
        "user_id" => user["user_id"]
      }

      event.set("book", new_book)
      event.set("user", new_user)
      event.set("book_rating", rating)
    '
  }

  mutate {
    remove_field => ["@timestamp", "@version", "host", "path", "message", "log", "event"]
  }
}

output {
  stdout { codec => dots }

  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "books_dataset"
    template => "/usr/share/logstash/data/books_template.json"
    template_name => "books"
    template_overwrite => true
  }
}
